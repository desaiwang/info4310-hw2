<html>

<head>
  <title>INFO 4310 - HW2</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  <link href="./style.css" rel="stylesheet" type="text/css">

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>
    .countries {
      stroke: white;
      stroke-width: 1px;
      fill: #bbb;
    }

    .row {
      display: flex;
      flex-direction: row;
      justify-content: center
    }

    .column {
      display: flex;
      flex-direction: column;
    }

    .annotation {
      font-size: 12px;
      margin-top: -15px;
      margin-left: 40px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    .serie rect {
      fill-opacity: 0.8;
    }

    .serie:hover rect {
      fill-opacity: 1;
    }
  </style>

</head>

<body>
  <div style="margin-top:30px">
    <h2 style="text-align: center"> Exploring Power Plants Around the World</h2>
    <h5 style="text-align: center; margin-top: -65px; margin-bottom: 50px"> Natalia Jordan (naj46) and Desai Wang
      (dw584)</h5>

    <div class="row 1">
      <svg id="mapGlobal" width="1000" height="600">
        <!-- <text id="plantName" y="10" x="1000" alignment-baseline="hanging"></text>
        <text id="plantCapacity" y="20" x="1000" alignment-baseline="hanging"></text> -->
      </svg>
      <!-- <div>
        <svg width="300" height="200">
        </svg>

      </div> -->
    </div>
    <div id="container" style="width: 1000px; height: 600px;"></div>
    <!-- <svg id="map" width="1500" height="1000"></svg> -->
    <div style="margin-top:100px">
      <svg id="primaryFuel" width="1200" height="500"></svg>
      <svg id="pfCountry" width="1200" height="500"></svg>
      <svg id="powerPlants" width="1200" height="500"></svg>
    </div>




  </div>

  </div>
  <script>


    const container = d3.select("#container").style("position", "relative");
    const width = Number(container.style("width").replace("px", ""));
    const height = Number(container.style("height").replace("px", ""));
    const margin = { top: 10, right: 10, bottom: 50, left: 50 };
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;

    const canvas = container.append("canvas")
      .attr("width", chartWidth)
      .attr("height", chartHeight)
      .style("position", "absolute")
      .style("top", margin.top + 'px')
      .style("left", margin.left + 'px');


    let genData = () => {
      const randomX = d3.randomNormal(width / 2, 80);
      const randomY = d3.randomNormal(height / 2, 80);
      return Array.from({ length: 20000 }, () => [randomX(), randomY()]);
    }

    let data = genData();

    const context = canvas.node().getContext('2d');
    let r = 2;

    d3.select(context.canvas).call(d3.zoom()
      .scaleExtent([1, 8])
      .on("zoom", ({ transform }) => zoomed(transform)));

    function zoomed(transform) {
      context.save();
      context.clearRect(0, 0, width, height);
      context.translate(transform.x, transform.y);
      context.scale(transform.k, transform.k);
      context.beginPath();
      for (const [x, y] of data) {
        context.moveTo(x + r / transform.k, y);
        context.arc(x, y, r / transform.k, 0, 2 * Math.PI);
      }
      context.fill();
      context.restore();
    }

    zoomed(d3.zoomIdentity);


    // d3.select("container").append(context);


  </script>
</body>

</html>