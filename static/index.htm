<html>

<head>
  <title>INFO 4310 - HW2</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>
    .tractsIncome {
      stroke: white;
      stroke-width: 2px;
    }

    .tractsTreeCount {
      stroke: white;
      stroke-width: 2px;
    }

    .row {
      display: flex;
      flex-direction: row;
      justify-content: center
    }

    .column {
      display: flex;
      flex-direction: column;
    }

    .annotation {
      font-size: 12px;
      margin-top: -15px;
      margin-left: 40px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }
  </style>

</head>

<body>
  <div style="margin-top:30px">
    <h2 style="text-align: center"> Exploring Power Plants Around the World</h2>
    <div class="row 1">
      <svg id="mapGlobal"></svg>
    </div>


  </div>

  </div>


  <script>

    //row 1 elements
    const svgIncome = d3.select("#mapGlobal");
    const width = svgIncome.attr("width");
    const height = svgIncome.attr("height");
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const mapWidth = width - margin.left - margin.right;
    const mapHeight = height - margin.top - margin.bottom;

    const mapIncome = svgIncome.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    const svgTreeCount = d3.select("#mapTreeCount");
    const mapTreeCount = svgTreeCount.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //row 2 elements
    const svgKey = d3.select("#mapKey");
    const keyWidth = svgKey.attr("width") - margin.left - margin.right;
    const keyHeight = svgKey.attr("height") - margin.top - margin.bottom;

    const mapKey = svgKey.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    const svghighincome = d3.select("#tract_highincome");
    const maphighincome = svghighincome.append("g")
      .attr("transform", "translate(" + margin.left + "," + 10 + ")");

    const svglowincome = d3.select("#tract_lowincome");
    const maplowincome = svglowincome.append("g")
      .attr("transform", "translate(" + margin.left + "," + 10 + ")");

    const scatterplot = d3.select("#scatterplot");
    const scatterWidth = scatterplot.attr("width");
    const scatterHeight = scatterplot.attr("height");
    const marginScatter = { top: 15, right: 15, bottom: 45, left: 50 };

    const annotations = scatterplot.append("g").attr("id", "scatterplot annotations")
    const mapScatter = scatterplot.append("g")
      .attr("transform", "translate(" + marginScatter.left + "," + marginScatter.top + ")");
    const mapScatterWidth = scatterWidth - marginScatter.left - marginScatter.right;
    const mapScatterHeight = scatterHeight - marginScatter.top - marginScatter.bottom;

    // map geojson
    const requestData = async function () {

      //load data by census tracts
      const tracts = await d3.json("./tree_by_census_tracts.geojson");

      // Mercator projection
      var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], tracts);
      var path = d3.geoPath().projection(projection);

      //scales for income and treeCount
      const incomeExtent = d3.extent(tracts.features, d => d.properties["est household mean income"]);
      const incomeColorScale = d3.scaleQuantile()
        .domain(incomeExtent)
        .range(d3.schemeBlues[6]);

      const treeCountExtent = d3.extent(tracts.features, d => d.properties["TreeCount"]);
      const treeCountColorScale = d3.scaleQuantile()
        .domain(treeCountExtent)
        .range(d3.schemeGreens[6]);

      // census tracts for income map
      mapIncome.selectAll("path.tractsIncome").data(tracts.features)
        .join("path")
        .attr("class", "tractsIncome")
        .attr("d", path)
        .attr("fill", d => incomeColorScale(d.properties["est household mean income"]));
      drawLegend("#legendIncome", incomeColorScale, d3.format("$.2s"));

      // census tracts for tree count map
      mapTreeCount.selectAll("path.tractsTreeCount").data(tracts.features)
        .join("path")
        .attr("class", "tractsTreeCount")
        .attr("d", path)
        .attr("fill", d => treeCountColorScale(d.properties["TreeCount"]));
      drawLegend("#legendTreeCount", treeCountColorScale, d3.format(".2s"));


      // const trees = await d3.csv("./Street_Tree_List-2022-01-30_FILTERED.csv", d3.autoType);

      const timeParser = d3.timeParse("%m/%d/%y %H:%M")
      const today = timeParser("1/31/24 0:00")

      //the entire tree dataset takes a long time to process, so instead I hardcoded the domains after I processed the data once
      //below is code used to get extents and domains for tree diameter and plant date

      // trees.forEach(d => {

      //   // Use the projection just like a scale to convert from lng/lat to pixels
      //   d.Position = projection([d.Longitude, d.Latitude]);

      //   //parse time, and adjust if parsed year wrong (eg. 1960 as 2060)
      //   time = timeParser(d['PlantDate']);
      //   if (time > today) {
      //     time = d3.utcYear.offset(time, -100)
      //   };
      //   d['PlantDate'] = time;

      // });

      // const diameterExtent = d3.extent(trees, d => d['DBH']);
      // const diameterScale = d3.scaleLinear().domain(diameterExtent).range([2, 10]);

      // const dateExtent = d3.extent(trees, d => d['PlantDate']);
      // const dateScale = d3.scaleLinear().domain(dateExtent).range([1, 0]);
      // console.log(dateExtent)

      const diameterScale = d3.scaleLinear().domain([0, 151]).range([2, 10]);

      const dateStart = d3.utcYear.offset(timeParser("2/06/56 0:00"), -100)
      const dateEnd = timeParser("1/24/22 0:00")
      const dateScale = d3.scaleLinear().domain([dateStart, dateEnd]).range([1, 0]);

      //map key for second row
      const highlightTracts = ["Census Tract 133", "Census Tract 120.01", "Census Tract 121", "Census Tract 120.02", "Census Tract 122.02", "Census Tract 122.03", "Census Tract 122.04", "Census Tract 123.01", "Census Tract 123.02"]

      var projectionKey = d3.geoMercator().fitSize([keyWidth, keyHeight], tracts);
      var pathKey = d3.geoPath().projection(projectionKey);

      tracts.features.forEach(d => {

        if (highlightTracts.includes(d.properties["NAME"])) {
          d.properties['highlightColor'] = incomeColorScale(d.properties["est household mean income"]);
        }
        else { d.properties['highlightColor'] = "#AAA" }
      })

      mapKey.selectAll("path.tractsKey").data(tracts.features)
        .join("path")
        .attr("class", "tractsKey")
        .attr("d", pathKey)
        .attr("stroke", d => d.properties['highlightColor'])
        .attr("stroke-width", 0.25)
        .attr("fill", d => d.properties['highlightColor']);

      //annotations of areas on map key
      mapKey.append("text").text("A").attr("x", 100).attr("y", 110).attr("font-size", 12);
      mapKey.append("text").text("B").attr("x", 162).attr("y", 116).attr("font-size", 12);

      //load data for census tracts
      const tracthighincome = await d3.json("./tract_highincome.geojson");

      // Mercator projection
      var projectionhighincome = d3.geoMercator().fitSize(
        [svghighincome.attr("width") - margin.left - margin.right,
        svghighincome.attr("height") - margin.top - margin.bottom],
        tracthighincome);
      var pathhighincome = d3.geoPath().projection(projectionhighincome);

      // census tracts for income map
      maphighincome.selectAll("path.tracthighincome").data(tracthighincome.features)
        .join("path")
        .attr("class", "tracthighincome")
        .attr("d", pathhighincome)
        .attr("fill", "#AAA")
        .attr("stroke", "#AAA");

      //map trees
      const treeshighincome = await d3.json("./tree_highincome.geojson");
      treeshighincome.features.forEach(d => {

        d.Position = (projectionhighincome([d.properties['Longitude'], d.properties['Latitude']]));

        //parse time, and adjust if parsed year wrong (eg. 1960 as 2060)
        time = timeParser(d.properties['PlantDate']);
        if (time > today) {
          time = d3.utcYear.offset(time, -100)
        };
        d.properties['PlantDate'] = time;
      });

      // Draw circles using the Positions we just made
      maphighincome.selectAll("circle").data(treeshighincome.features)
        .join("circle")
        .attr("r", d => diameterScale(d.properties['DBH']))
        .attr("fill", d => d3.interpolateGreens(dateScale(d.properties["PlantDate"])))
        .attr("opacity", 0.5)
        .attr("cx", d => d.Position[0])
        .attr("cy", d => d.Position[1]);

      //annotations
      maphighincome.append("text").text("A").attr("x", 220).attr("y", 110).attr("font-size", 12);
      let highincomeTreeCount = 0;
      let highincomeAvgIncome = 0;

      [highincomeTreeCount, highincomeAvgIncome] = sumTreeCount_avgMeanIncome(tracthighincome);

      //annotations of areas on map key
      d3.select("#highincome_income")
        .append("text")
        .text(`mean household income: ${d3.format("$,")(highincomeAvgIncome)}`);

      d3.select("#highincome_trees")
        .append("text")
        .text(`number of trees: ${highincomeTreeCount}`);

      //tracts of low incomes
      const tractlowincome = await d3.json("./tract_lowincome.geojson");

      // Mercator projection
      var projectionlowincome = d3.geoMercator().fitSize([svglowincome.attr("width") - margin.left - margin.right, svglowincome.attr("height") - margin.top - margin.bottom], tractlowincome);
      var pathlowincome = d3.geoPath().projection(projectionlowincome);

      // census tracts for income map
      maplowincome.selectAll("path.tractlowincome").data(tractlowincome.features)
        .join("path")
        .attr("class", "tractlowincome")
        .attr("d", pathlowincome)
        .attr("fill", "#AAA")
        .attr("stroke", "#AAA");

      const treeslowincome = await d3.json("./tree_lowincome.geojson");

      treeslowincome.features.forEach(d => {
        d.Position = (projectionlowincome([d.properties['Longitude'], d.properties['Latitude']]));

        //parse time, and adjust if parsed year wrong (eg. 1960 as 2060)
        time = timeParser(d.properties['PlantDate']);
        if (time > today) {
          time = d3.utcYear.offset(time, -100)
        };
        d.properties['PlantDate'] = time;
      });

      maplowincome.selectAll("circle").data(treeslowincome.features)
        .join("circle")
        .attr("r", d => diameterScale(d.properties['DBH']))
        .attr("fill", d => d3.interpolateGreens(dateScale(d.properties["PlantDate"])))
        .attr("opacity", 0.5)
        .attr("cx", d => d.Position[0])
        .attr("cy", d => d.Position[1]);

      //annotations
      maplowincome.append("text").text("B").attr("x", 220).attr("y", 110).attr("font-size", 12);
      let lowincomeTreeCount = 0;
      let lowincomeAvgIncome = 0;

      [lowincomeTreeCount, lowincomeAvgIncome] = sumTreeCount_avgMeanIncome(tractlowincome);

      //annotations of areas on map key
      d3.select("#lowincome_income")
        .append("text")
        .text(`mean household income: ${d3.format("$,")(lowincomeAvgIncome)}`);

      d3.select("#lowincome_trees")
        .append("text")
        .text(`number of trees: ${lowincomeTreeCount}`);

      //scatterplot
      const incomeScale = d3.scaleLinear().domain(incomeExtent).range([0, mapScatterWidth]);
      const treeCountScale = d3.scaleLinear().domain(treeCountExtent).range([mapScatterHeight, 0]);

      // make axes and grids
      let leftAxis = d3.axisLeft(treeCountScale);
      let leftGridLines = d3.axisLeft(treeCountScale).tickSize(-mapScatterWidth - 10).tickFormat("");
      let bottomAxis = d3.axisBottom(incomeScale).tickFormat(d3.format("$.0s"));
      let bottomGridLines = d3.axisBottom(incomeScale).tickSize(-mapScatterHeight - 10).tickFormat("");

      annotations.append("g").attr("class", "y axis")
        .attr("transform", `translate(${marginScatter.left - 10}, ${marginScatter.top})`)
        .call(leftAxis);
      annotations.append("g").attr("class", "y gridlines")
        .attr("transform", `translate(${marginScatter.left - 10}, ${marginScatter.top})`)
        .call(leftGridLines);
      annotations.append("g").attr("class", "x axis")
        .attr("transform", `translate(${marginScatter.left}, ${mapScatterHeight + marginScatter.top + 10})`)
        .call(bottomAxis);
      annotations.append("g").attr("class", "x gridlines")
        .attr("transform", `translate(${marginScatter.left}, ${mapScatterHeight + marginScatter.top + 10})`)
        .call(bottomGridLines);

      let circles = mapScatter.selectAll("circle.scatter").data(tracts.features)
        .join("circle")
        .attr("class", "scatter")
        .attr("cx", d => {
          return incomeScale(d.properties["est household mean income"])
        }
        )
        .attr("cy", d => treeCountScale(d.properties["TreeCount"]))
        .attr("r", 3)
        .attr("opacity", 0.6)
        .attr("fill", "#AAA");

    }
    requestData();
  </script>

  <script id="helper function">
    function sumTreeCount_avgMeanIncome(geodata) {
      let treeCount = 0;
      let meanIncomeSum = 0;

      geodata.features.forEach(d => {
        treeCount += d.properties['TreeCount'];
        meanIncomeSum += d.properties["est household mean income"];
      })

      let meanIncome = meanIncomeSum / geodata.features.length

      return [treeCount, meanIncome]
    }
    //legend function from INFO 3300 lecture notes
    function drawLegend(legendSelector, legendColorScale, stringFormatter) {

      const offsets = {
        width: 30,
        top: 2,
        bottom: 24
      };

      const stepSize = 4;

      const minMaxExtendPercent = 0;


      const legend = d3.select(legendSelector);
      const legendHeight = legend.attr("height");
      const legendBarWidth = legend.attr("width") - (offsets.width * 2);
      const legendMinMax = d3.extent(legendColorScale.domain());


      const minMaxExtension = (legendMinMax[1] - legendMinMax[0]) * minMaxExtendPercent;
      const barHeight = legendHeight - offsets.top - offsets.bottom;


      let barScale = d3.scaleLinear().domain([legendMinMax[0] - minMaxExtension,
      legendMinMax[1] + minMaxExtension])
        .range([0, legendBarWidth - 10]);
      let barAxis = d3.axisBottom(barScale);


      let bar = legend.append("g")
        .attr("class", "legend colorbar")
        .attr("transform", `translate(${offsets.width},${offsets.top})`)


      if (legendColorScale.hasOwnProperty('thresholds') || legendColorScale.hasOwnProperty('quantiles')) {
        let thresholds = [];
        if (legendColorScale.hasOwnProperty('thresholds')) { thresholds = legendColorScale.thresholds() }
        else { thresholds = legendColorScale.quantiles() }

        let barThresholds = [legendMinMax[0], ...thresholds, legendMinMax[1]];

        barAxis.tickValues(barThresholds).tickFormat(stringFormatter);

        for (let i = 0; i < barThresholds.length - 1; i++) {
          let dataStart = barThresholds[i]; let dataEnd = barThresholds[i + 1];
          let pixelStart = barAxis.scale()(dataStart); let pixelEnd = barAxis.scale()(dataEnd); bar.append("rect").attr("x",
            pixelStart).attr("y", 0).attr("width", pixelEnd - pixelStart).attr("height", barHeight).style("fill",
              legendColorScale((dataStart + dataEnd) / 2.0));
        }
      } else if (legendColorScale.hasOwnProperty('rangeRound')) {
        for
          (let i = 0; i < legendBarWidth; i = i + stepSize) {
          let center = i + (stepSize / 2); let
            dataCenter = barAxis.scale().invert(center); if (dataCenter < legendMinMax[0]) {
              bar.append("rect").attr("x", i)
                .attr("y", 0).attr("width", stepSize).attr("height", barHeight).style("fill", legendColorScale(legendMinMax[0]));
            } else if (dataCenter < legendMinMax[1]) {
              bar.append("rect").attr("x", i).attr("y", 0).attr("width", stepSize)
                .attr("height", barHeight).style("fill", legendColorScale(dataCenter));
            } else {
            bar.append("rect").attr("x", i)
              .attr("y", 0).attr("width", stepSize).attr("height", barHeight).style("fill", legendColorScale(legendMinMax[1]));
          }
        }
      } else {
        let nomVals = legendColorScale.domain().sort(); let barScale = d3.scaleBand().domain(nomVals).range([0,
          legendBarWidth]).padding(0.05); barAxis.scale(barScale); nomVals.forEach(d => {
            bar.append("rect")
              .attr("x", barScale(d))
              .attr("y", 0)
              .attr("width", barScale.bandwidth())
              .attr("height", barHeight)
              .style("fill", legendColorScale(d));
          });
      }

      legend.append("g")
        .attr("class", "legend axis")
        .attr("class", "colorLegendfont")
        .attr("transform", `translate(${offsets.width},${offsets.top + barHeight + 5})`)
        .call(barAxis);

    }

  </script>
</body>

</html>