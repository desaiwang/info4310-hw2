<html>

<head>
  <title>INFO 4310 - HW2</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  <link href="./style.css" rel="stylesheet" type="text/css">

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-tile@1"></script>
  <style>
    .countries {
      stroke: white;
      stroke-width: 1px;
      fill: #bbb;
    }

    .row {
      display: flex;
      flex-direction: row;
      justify-content: center
    }

    .column {
      display: flex;
      flex-direction: column;
    }

    .annotation {
      font-size: 12px;
      margin-top: -15px;
      margin-left: 40px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    .serie rect {
      fill-opacity: 0.8;
    }

    .serie:hover rect {
      fill-opacity: 1;
    }
  </style>

</head>

<body>
  <div style="margin-top:30px">
    <h2 style="text-align: center"> Exploring Power Plants Around the World</h2>
    <h5 style="text-align: center; margin-top: -65px; margin-bottom: 50px"> Natalia Jordan (naj46) and Desai Wang
      (dw584)</h5>

    <div class="row 1">
      <svg id="mapGlobal" width="1000" height="600">
        <!-- <text id="plantName" y="10" x="1000" alignment-baseline="hanging"></text>
        <text id="plantCapacity" y="20" x="1000" alignment-baseline="hanging"></text> -->
      </svg>
      <!-- <div>
        <svg width="300" height="200">
        </svg>

      </div> -->
    </div>
    <div id="container" style="width: 1000px; height: 600px;">
      <svg id="mapTile" width="1000" height="600"></svg>
    </div>


    <div style="margin-top:100px">
      <svg id="primaryFuel" width="1200" height="500"></svg>
      <svg id="pfCountry" width="1200" height="500"></svg>
      <svg id="powerPlants" width="1200" height="500"></svg>
    </div>




  </div>

  </div>
  <script>

    const container = d3.select("#container").style("position", "relative");

    const mapArea = d3.select("#mapTile");

    const width = mapArea.attr("width");
    const height = mapArea.attr("height");

    const canvas = container.append("canvas")
      .attr("width", width)
      .attr("height", height)
      .style("position", "absolute")
      .style("top", 0)
      .style("left", 0);
    const context = canvas.node().getContext('2d');

    const interactiveArea = container.append("svg").attr("width", 1000).attr("height", 600);


    const deltas = [-100, -4, -1, 0];

    let url = (x, y, z) =>
      `https://api.mapbox.com/styles/v1/desaiwang/clswj0z9q00oq01p4ao6scxlh/tiles/${z}/${x}/${y}${devicePixelRatio > 1 ? "@2x" : ""}?access_token=pk.eyJ1IjoiZGVzYWl3YW5nIiwiYSI6ImNrc2puMHIyaTJmbWsydG41bmljMWExdjIifQ.A4w7M2K7sSIN-uLuXarl_w`

    //alt monochrome style key: ckttxzrvq0s4i18l4he5vtltt
    const requestZoomableMapData = async () => {

      //load power plant data
      const powerPlants = await d3.csv("./global_power_plant_database.csv", d3.autoType);
      const countries = await d3.json("./countries.geojson");

      // console.log(powerPlants);

      // Mercator projection
      var projection = d3.geoMercator().scale(1 / (2 * Math.PI)).translate([0, 0]);
      //d3.geoMercator().fitSize([mapWidth, mapHeight], countries);
      var path = d3.geoPath().projection(projection);

      // power capacity
      const capacityExtent = d3.extent(powerPlants, d => d["capacity_mw"]);
      const capacityScale = d3.scaleLog()
        .domain(capacityExtent)
        .range([1, 5]);


      powerPlants.forEach(d => {
        d.Position = projection([d.longitude, d.latitude]);
        d.Radius = capacityScale(d["capacity_mw"]);
      })


      const tile = d3.tile()
        .extent([[0, 0], [width, height]])
        .tileSize(512)
        .clampX(false);

      const levels = mapArea.append("g")
        .attr("pointer-events", "none")
        .selectAll("g")
        .data(deltas)
        .join("g")
        .style("opacity", null); //set to 0.3 to see low resolution files

      // let circles = mapArea.selectAll("circle").data(powerPlants)
      //   .join("circle")
      //   .attr("cx", d => d.Position[0])
      //   .attr("cy", d => d.Position[1])
      //   .attr("r", d => d.Radius);



      var zoom = d3.zoom()
        .scaleExtent([1 << 10, 1 << 19])
        .on("zoom", ({ transform }) => zoomed(transform));

      container.on("mouseover", (event) => console.log(event));

      container
        .call(zoom)
        .call(zoom.transform, d3.zoomIdentity
          .translate(width / 2, height / 2 + 100)
          .scale(1 << 10)
        )
        .on("mousewheel.zoom", null)
        .on("DOMMouseScroll.zoom", null); //disable scrolling while zooming


      function zoomed(transform) {

        context.save();
        context.clearRect(0, 0, width, height);
        context.translate(transform.x, transform.y);
        context.scale(transform.k, transform.k);
        context.beginPath();

        powerPlants.forEach((d, i) => {
          let x = d.Position[0];
          let y = d.Position[1];
          let rad = d.Radius;
          let color = d.Color;

          context.fillStyle = color;
          context.beginPath();
          context.arc(x, y, rad / transform.k, 0, 2 * Math.PI);
          context.fill();
        });
        context.restore();

        console.log(transform);
        levels.each(function (delta) {
          const tiles = tile.zoomDelta(delta)(transform);
          console.log(tiles);

          d3.select(this)
            .selectAll("image")
            .data(tiles, d => d)
            .join("image")
            .attr("xlink:href", d => url(...d3.tileWrap(d)))
            .attr("x", ([x]) => (x + tiles.translate[0]) * tiles.scale)
            .attr("y", ([, y]) => (y + tiles.translate[1]) * tiles.scale)
            .attr("width", tiles.scale)
            .attr("height", tiles.scale);
        });


        // projection
        //   .scale(transform.k / (2 * Math.PI))
        //   .translate([transform.x, transform.y]);


        // circles
        //   .attr("transform", d => `translate(${projection([d.longitude, d.latitude])})`);


      }
    }

    requestZoomableMapData();

  </script>
</body>

</html>