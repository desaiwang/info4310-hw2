<html>

<head>
  <title>INFO 4310 - HW2</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  <link href="./style.css" rel="stylesheet" type="text/css">

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-tile@1"></script>
  <style>
    .countries {
      stroke: white;
      stroke-width: 1px;
      fill: #bbb;
    }

    .row {
      display: flex;
      flex-direction: row;
      justify-content: center
    }

    .column {
      display: flex;
      flex-direction: column;
    }

    .annotation {
      font-size: 12px;
      margin-top: -15px;
      margin-left: 40px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    .serie rect {
      fill-opacity: 0.8;
    }

    .serie:hover rect {
      fill-opacity: 1;
    }
  </style>

</head>

<body>
  <div style="margin-top:30px">
    <h2 style="text-align: center"> Exploring Power Plants Around the World</h2>
    <h5 style="text-align: center; margin-top: -65px; margin-bottom: 50px"> Natalia Jordan (naj46) and Desai Wang
      (dw584)</h5>

    <div class="row 1">
      <svg id="mapGlobal" width="1000" height="600">
        <!-- <text id="plantName" y="10" x="1000" alignment-baseline="hanging"></text>
        <text id="plantCapacity" y="20" x="1000" alignment-baseline="hanging"></text> -->
      </svg>
      <!-- <div>
        <svg width="300" height="200">
        </svg>

      </div> -->
    </div>
    <div id="container" style="width: 1000px; height: 600px;"></div>
    <svg id="svgTransit" width="1000" height="600"></svg>
    <div style="margin-top:100px">
      <svg id="primaryFuel" width="1200" height="500"></svg>
      <svg id="pfCountry" width="1200" height="500"></svg>
      <svg id="powerPlants" width="1200" height="500"></svg>
    </div>




  </div>

  </div>
  <script>

    const svgGlobal = d3.select("#mapGlobal");
    const width = svgGlobal.attr("width");
    const height = svgGlobal.attr("height");
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const mapWidth = width - margin.left - margin.right;
    const mapHeight = height - margin.top - margin.bottom;

    const svgTransit = d3.select("#svgTransit");
    const widthTransit = svgTransit.attr("width");
    const heightTransit = svgTransit.attr("height");
    const deltas = [-100, -4, -1, 0];

    let url = (x, y, z) =>
      `https://api.mapbox.com/styles/v1/desaiwang/ckttxzrvq0s4i18l4he5vtltt/tiles/${z}/${x}/${y}${devicePixelRatio > 1 ? "@2x" : ""}?access_token=pk.eyJ1IjoiZGVzYWl3YW5nIiwiYSI6ImNrc2puMHIyaTJmbWsydG41bmljMWExdjIifQ.A4w7M2K7sSIN-uLuXarl_w`

    //monochrome style key: ckttxzrvq0s4i18l4he5vtltt
    const requestZoomableMapData = async () => {

      //load power plant data
      const powerPlants = await d3.csv("./global_power_plant_database.csv", d3.autoType);
      const countries = await d3.json("./countries.geojson");

      // console.log(powerPlants);

      // Mercator projection
      var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], countries);
      var path = d3.geoPath().projection(projection);


      const projectionTransit = d3.geoMercator()
        .scale(1 / (2 * Math.PI))
        .translate([0, 0]);


      // const render = d3.geoPath(projectionTransit);

      const tile = d3.tile()
        .extent([[0, 0], [widthTransit, heightTransit]])
        .tileSize(512)
        .clampX(false);

      const levels = svgTransit.append("g")
        .attr("pointer-events", "none")
        .selectAll("g")
        .data(deltas)
        .join("g")
        .style("opacity", null); //set to 0.3 to see low resolution files



      var zoom = d3.zoom()
        .scaleExtent([1 << 18.5, 1 << 25])
        .on("zoom", ({ transform }) => zoomed(transform));

      svgTransit
        .call(zoom)
        .call(zoom.transform, d3.zoomIdentity
          .translate(widthTransit / 2, heightTransit / 2)
          .scale(- 1 << 19)
          .translate(...projectionTransit([-76.47, 42.46]))
          .scale(-1)
        )
        .on("mousewheel.zoom", null)
        .on("DOMMouseScroll.zoom", null); //disable scrolling while zooming


      function zoomed(transform) {

        levels.each(function (delta) {
          const tiles = tile.zoomDelta(delta)(transform);

          d3.select(this)
            .selectAll("image")
            .data(tiles, d => d)
            .join("image")
            .attr("xlink:href", d => url(...d3.tileWrap(d)))
            .attr("x", ([x]) => (x + tiles.translate[0]) * tiles.scale)
            .attr("y", ([, y]) => (y + tiles.translate[1]) * tiles.scale)
            .attr("width", tiles.scale)
            .attr("height", tiles.scale);
        });



        // projectionTransit
        //   .scale(transform.k / (2 * Math.PI))
        //   .translate([transform.x, transform.y]);


      }
    }

    requestZoomableMapData();

  </script>
</body>

</html>